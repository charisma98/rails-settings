Settings

Settings is a plugin that makes managing a table of global key, value pair easy.
Think of it like a global Hash stored in you database, that uses simple ActiveRecord
like methods for manipulation.  Keep track of any global setting that you dont want
to hard code into your rails app.

The syntax is easy.  First, lets create some settings to keep track of:
	Settings.admin_password = 'supersecret'
	Settings.date_format = '%m %d, %Y'
	Settings.foo = 'bar'

Now lets read them back:
	Settings.foo						# returns 'bar'

Changing an existing setting is the same as creating a new setting:
	Settings.foo = 'super duper bar'

Decide you dont want to track a particular setting anymore?
	Settings.destroy :foo
	Settings.foo						# Now gives a setting variable not found error.

Want a list of all the settings?
	Settings.all						# returns {'admin_password' => 'super_secret', 'date_format' => '%m %d, %Y'}

Set defaults for certain settings of your app.  This will cause the defined settings to return with the
Specified value even if they are not in the database.
  Settings::DEFAULT_VALUES.merge!({:some_setting => 'foo'}) #put a line like this in environment.rb
  
  Settings.some_setting           #=> returns "foo" even though no record is in the databse for "some_setting"
  Settings.some_setting = 'bar'   # Database record is now created and this record will be used instead of the default


***
* To get started:

You must create the table used by the Settings model.  Simply run this command:
	ruby script/generate settings_migration

Now just put that migration in the database with:
	rake migrate



All there is to it!. Enjoy!




The migration generator gives you the following schema:

	class AddSettingsTable < ActiveRecord::Migration
	  def self.up
		create_table :settings, :force => true do |t|
			t.column :var, :string, :null => false
			t.column :value, :string, :null => true
			t.column :created_at, :datetime
			t.column :updated_at, :datetime
		end
	  end

	  def self.down
		drop_table :settings
	  end
	end